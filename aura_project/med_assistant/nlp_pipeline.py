"""
Pipeline NLP pour AURA - Assistant M√©dical
Traitement automatique des observations m√©dicales avec int√©gration FastAPI et DrBERT
"""

import logging
from typing import Dict, Any, Optional, List, Tuple
import json
import random
import os
import tempfile
from .api_client import fastapi_client

# Imports pour Whisper (fallback local)
try:
    import torch
    import torchaudio
    from transformers import WhisperProcessor, WhisperForConditionalGeneration
    import librosa
    import soundfile as sf
    WHISPER_AVAILABLE = True
except ImportError as e:
    WHISPER_AVAILABLE = False
    print(f"‚ö†Ô∏è Whisper non disponible: {e}")

# Imports pour DrBERT (extraction d'entit√©s)
try:
    from transformers import AutoTokenizer, AutoModelForTokenClassification, pipeline
    DRBERT_AVAILABLE = True
except ImportError as e:
    DRBERT_AVAILABLE = False
    print(f"‚ö†Ô∏è DrBERT non disponible: {e}")

logger = logging.getLogger(__name__)


class NLPPipeline:
    """
    Pipeline de traitement NLP pour les observations m√©dicales
    Int√®gre : transcription Whisper, classification via FastAPI, extraction d'entit√©s DrBERT, r√©sum√©
    """
    
    def __init__(self):
        """Initialise la pipeline NLP avec FastAPI, Whisper et DrBERT"""
        self.models_loaded = False
        self.whisper_available = WHISPER_AVAILABLE
        self.drbert_available = DRBERT_AVAILABLE
        self.device = "cuda" if torch.cuda.is_available() else "cpu" if WHISPER_AVAILABLE else "cpu"
        self.fastapi_available = False
        self.available_models = []
        
        # Mapping des pathologies du mod√®le
        self.pathology_mapping = {
            0: 'cardiovasculaire',
            1: 'psy', 
            2: 'diabete'
        }
        
        # Mapping des entit√©s DrBERT vers nos cat√©gories
        self.drbert_entity_mapping = {
            'DISO': 'DISO',  # Disorders/Maladies
            'CHEM': 'CHEM',  # Chemicals/M√©dicaments
            'ANAT': 'ANAT',  # Anatomie
            'PROC': 'PROC',  # Proc√©dures
            'LIVB': 'ANAT',  # Living beings -> Anatomie
            'OBJC': 'PROC',  # Objects -> Proc√©dures
            'PHEN': 'DISO',  # Phenomena -> Disorders
            'PHYS': 'DISO',  # Physiology -> Disorders
            'GEOG': 'PROC',  # Geography -> Proc√©dures
            'CONC': 'PROC',  # Concepts -> Proc√©dures
        }
        
        self._load_models()
    
    def _load_models(self):
        """
        Charge les mod√®les NLP incluant Whisper, DrBERT et v√©rifie FastAPI
        """
        try:
            # V√©rifier la disponibilit√© de FastAPI
            self.fastapi_available = fastapi_client.is_api_available()
            if self.fastapi_available:
                self.available_models = fastapi_client.get_available_models()
                logger.info(f"‚úÖ FastAPI disponible avec {len(self.available_models)} mod√®les: {self.available_models}")
            else:
                logger.warning("‚ö†Ô∏è FastAPI non disponible, utilisation des mod√®les locaux")
            
            # Charger Whisper pour la transcription (local)
            if self.whisper_available:
                logger.info("üé§ Chargement du mod√®le Whisper...")
                
                self.whisper_processor = WhisperProcessor.from_pretrained("openai/whisper-small")
                self.whisper_model = WhisperForConditionalGeneration.from_pretrained("openai/whisper-small")
                self.whisper_model.to(self.device)
                
                logger.info(f"‚úÖ Whisper charg√© sur {self.device}")
            else:
                logger.warning("‚ö†Ô∏è Whisper non disponible, utilisation de la simulation")
            
            # Charger DrBERT pour l'extraction d'entit√©s (local)
            if self.drbert_available:
                logger.info("üß† Chargement du mod√®le DrBERT...")
                
                try:
                    self.drbert_tokenizer = AutoTokenizer.from_pretrained("Thibeb/DrBert_generalized")
                    self.drbert_model = AutoModelForTokenClassification.from_pretrained("Thibeb/DrBert_generalized")
                    
                    # Cr√©er le pipeline NER
                    self.drbert_pipeline = pipeline(
                        "ner",
                        model=self.drbert_model,
                        tokenizer=self.drbert_tokenizer,
                        aggregation_strategy="simple",
                        device=0 if torch.cuda.is_available() else -1
                    )
                    
                    logger.info(f"‚úÖ DrBERT charg√© sur {self.device}")
                    
                except Exception as e:
                    logger.error(f"‚ùå Erreur chargement DrBERT: {e}")
                    self.drbert_available = False
            else:
                logger.warning("‚ö†Ô∏è DrBERT non disponible, utilisation de la simulation")
            
            self.models_loaded = True
            logger.info("‚úÖ Pipeline NLP initialis√©e avec succ√®s")
            
        except Exception as e:
            logger.error(f"‚ùå Erreur lors du chargement des mod√®les: {e}")
            self.models_loaded = False
            self.whisper_available = False
            self.drbert_available = False
            self.fastapi_available = False
    
    def transcribe_audio(self, audio_file_path: str) -> Optional[str]:
        """
        Transcrit un fichier audio en texte avec Whisper
        
        Args:
            audio_file_path: Chemin vers le fichier audio
            
        Returns:
            Texte transcrit ou None en cas d'erreur
        """
        try:
            if not self.whisper_available or not self.models_loaded:
                logger.warning("‚ö†Ô∏è Whisper non disponible, utilisation de la simulation")
                return self._mock_transcription()
            
            logger.info(f"üé§ D√©but transcription de: {audio_file_path}")
            
            # V√©rifier que le fichier existe
            if not os.path.exists(audio_file_path):
                logger.error(f"‚ùå Fichier audio non trouv√©: {audio_file_path}")
                return None
            
            # Charger l'audio avec librosa (plus robuste que torchaudio)
            try:
                # Charger et convertir √† 16kHz mono
                waveform, sr = librosa.load(audio_file_path, sr=16000, mono=True)
                logger.info(f"üìä Audio charg√©: {len(waveform)} √©chantillons √† {sr}Hz")
                
            except Exception as e:
                logger.error(f"‚ùå Erreur chargement audio: {e}")
                # Fallback avec torchaudio
                try:
                    waveform, sr = torchaudio.load(audio_file_path)
                    # Convertir en mono si st√©r√©o
                    if waveform.shape[0] > 1:
                        waveform = torch.mean(waveform, dim=0)
                    else:
                        waveform = waveform.squeeze()
                    
                    # Resample √† 16kHz
                    if sr != 16000:
                        resampler = torchaudio.transforms.Resample(orig_freq=sr, new_freq=16000)
                        waveform = resampler(waveform)
                    
                    waveform = waveform.numpy()
                    
                except Exception as e2:
                    logger.error(f"‚ùå Erreur fallback torchaudio: {e2}")
                    return None
            
            # Pr√©parer les inputs pour Whisper
            inputs = self.whisper_processor(
                waveform, 
                sampling_rate=16000, 
                return_tensors="pt", 
                padding=True
            )
            
            # D√©placer sur le bon device
            inputs = {k: v.to(self.device) for k, v in inputs.items()}
            
            logger.info("üß† G√©n√©ration de la transcription...")
            
            # G√©n√©rer la transcription
            with torch.no_grad():
                generated_ids = self.whisper_model.generate(
                    inputs["input_features"],
                    attention_mask=inputs.get("attention_mask", None),
                    language="fr",  # Forcer le fran√ßais
                    task="transcribe",
                    max_length=448,  # Limite raisonnable
                    num_beams=5,     # Am√©liorer la qualit√©
                    do_sample=False  # D√©terministe
                )
            
            # D√©coder la transcription
            transcription = self.whisper_processor.batch_decode(
                generated_ids, 
                skip_special_tokens=True
            )[0]
            
            # Nettoyer la transcription
            transcription = transcription.strip()
            
            logger.info(f"‚úÖ Transcription r√©ussie: {len(transcription)} caract√®res")
            logger.info(f"üìÑ Aper√ßu: {transcription[:100]}...")
            
            return transcription
            
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de la transcription Whisper: {e}")
            # Fallback vers simulation en cas d'erreur
            return self._mock_transcription()
    
    def classify_theme(self, text: str) -> tuple[Optional[str], Optional[int]]:
        """
        Classifie le th√®me m√©dical via FastAPI et retourne le th√®me + pr√©diction num√©rique
        
        Args:
            text: Texte √† classifier
            
        Returns:
            Tuple (th√®me_classifi√©, pr√©diction_num√©rique) ou (None, None) en cas d'erreur
        """
        try:
            if self.fastapi_available and self.available_models:
                # Utiliser le mod√®le de classification fine-tun√©
                model_name = "FinetunedMedicalModel"  # Votre mod√®le sp√©cialis√©
                
                if model_name in self.available_models:
                    result = fastapi_client.process_text(model_name, text)
                    
                    if result['success']:
                        response = result['response']
                        
                        # Parser la r√©ponse pour extraire la classe pr√©dite
                        # Format attendu: "Classe pr√©dite : X"
                        try:
                            if "Classe pr√©dite :" in response:
                                prediction_str = response.split("Classe pr√©dite :")[1].strip()
                                prediction = int(prediction_str)
                                
                                # Convertir la pr√©diction en th√®me
                                theme = self.pathology_mapping.get(prediction, 'autre')
                                
                                logger.info(f"üè∑Ô∏è Classification via FastAPI: pr√©diction={prediction}, th√®me={theme}")
                                return theme, prediction
                            else:
                                logger.warning(f"‚ö†Ô∏è Format de r√©ponse inattendu: {response}")
                                return self._mock_classification_with_prediction(text)
                                
                        except (ValueError, IndexError) as e:
                            logger.warning(f"‚ö†Ô∏è Erreur parsing pr√©diction: {e}")
                            return self._mock_classification_with_prediction(text)
                    else:
                        logger.warning(f"‚ö†Ô∏è Erreur FastAPI classification: {result['error']}")
                        return self._mock_classification_with_prediction(text)
                else:
                    logger.warning(f"‚ö†Ô∏è Mod√®le {model_name} non disponible")
                    return self._mock_classification_with_prediction(text)
            else:
                return self._mock_classification_with_prediction(text)
            
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de la classification: {e}")
            return self._mock_classification_with_prediction(text)
    
    def extract_entities_drbert(self, text: str) -> Dict[str, List[str]]:
        """
        Extrait les entit√©s m√©dicales avec DrBERT
        
        Args:
            text: Texte √† analyser
            
        Returns:
            Dictionnaire des entit√©s extraites par cat√©gorie
        """
        try:
            if not self.drbert_available or not self.models_loaded:
                logger.warning("‚ö†Ô∏è DrBERT non disponible, utilisation de la simulation")
                return self._mock_entities(text)
            
            logger.info(f"üîç Extraction d'entit√©s DrBERT pour: {text[:50]}...")
            
            # Utiliser le pipeline NER de DrBERT
            entities = self.drbert_pipeline(text)
            
            # Organiser les entit√©s par cat√©gorie
            categorized_entities = {
                'DISO': [],  # Disorders/Maladies
                'CHEM': [],  # Chemicals/M√©dicaments
                'ANAT': [],  # Anatomie
                'PROC': [],  # Proc√©dures
            }
            
            for entity in entities:
                entity_label = entity['entity_group']
                entity_text = entity['word']
                confidence = entity['score']
                
                # Mapper vers nos cat√©gories
                mapped_category = self.drbert_entity_mapping.get(entity_label, 'PROC')
                
                # Filtrer par confiance (seuil √† 0.5)
                if confidence > 0.5:
                    # √âviter les doublons
                    if entity_text not in categorized_entities[mapped_category]:
                        categorized_entities[mapped_category].append(entity_text)
                        logger.debug(f"  ‚úì {mapped_category}: {entity_text} (conf: {confidence:.2f})")
            
            # Nettoyer les cat√©gories vides
            categorized_entities = {k: v for k, v in categorized_entities.items() if v}
            
            logger.info(f"‚úÖ DrBERT: {sum(len(v) for v in categorized_entities.values())} entit√©s extraites")
            
            return categorized_entities
            
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de l'extraction DrBERT: {e}")
            return self._mock_entities(text)
    
    def extract_entities(self, text: str) -> Dict[str, Any]:
        """
        Extrait les entit√©s m√©dicales (utilise DrBERT maintenant)
        
        Args:
            text: Texte √† analyser
            
        Returns:
            Dictionnaire des entit√©s extraites
        """
        return self.extract_entities_drbert(text)
    
    def generate_summary(self, text: str) -> Optional[str]:
        """
        G√©n√®re un r√©sum√© via FastAPI ou fallback local
        
        Args:
            text: Texte √† r√©sumer
            
        Returns:
            R√©sum√© g√©n√©r√© ou None en cas d'erreur
        """
        try:
            if self.fastapi_available and self.available_models:
                # Utiliser le premier mod√®le disponible pour le r√©sum√©
                model_name = self.available_models[0]
                
                # Pr√©parer la question pour le r√©sum√©
                summary_prompt = f"R√©sumez ce texte m√©dical en fran√ßais de mani√®re concise et professionnelle: {text}"
                
                result = fastapi_client.process_text(model_name, summary_prompt)
                
                if result['success']:
                    summary = result['response'].strip()
                    logger.info(f"üìÑ R√©sum√© g√©n√©r√© via FastAPI: {len(summary)} caract√®res")
                    return summary
                else:
                    logger.warning(f"‚ö†Ô∏è Erreur FastAPI r√©sum√©: {result['error']}")
                    return self._mock_summary(text)
            else:
                return self._mock_summary(text)
            
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de la g√©n√©ration du r√©sum√©: {e}")
            return self._mock_summary(text)
    
    def process_observation(self, observation) -> Dict[str, Any]:
        """
        Traite une observation compl√®te avec toute la pipeline
        
        Args:
            observation: Instance du mod√®le Observation
            
        Returns:
            Dictionnaire avec tous les r√©sultats du traitement
        """
        results = {
            'transcription': None,
            'theme_classe': None,
            'model_prediction': None,
            'resume': None,
            'entites': {},
            'success': False,
            'error': None,
            'fastapi_used': self.fastapi_available,
            'drbert_used': self.drbert_available
        }
        
        try:
            logger.info(f"üîÑ D√©but traitement observation {observation.id}")
            
            # 1. Transcription si fichier audio (toujours local avec Whisper)
            if observation.audio_file:
                logger.info(f"üé§ Transcription du fichier: {observation.audio_file.path}")
                transcription = self.transcribe_audio(observation.audio_file.path)
                if transcription:
                    results['transcription'] = transcription
                    logger.info("‚úÖ Transcription termin√©e")
                else:
                    logger.warning("‚ö†Ô∏è √âchec de la transcription")
            
            # 2. D√©terminer le texte source
            text_source = results['transcription'] or observation.texte_saisi
            
            if not text_source:
                results['error'] = "Aucun texte disponible pour le traitement"
                logger.error("‚ùå Aucun texte source disponible")
                return results
            
            logger.info(f"üìù Texte source: {len(text_source)} caract√®res")
            
            # 3. Classification du th√®me (FastAPI ou local) avec pr√©diction num√©rique
            theme, prediction = self.classify_theme(text_source)
            if theme:
                results['theme_classe'] = theme
                results['model_prediction'] = prediction
                logger.info(f"üè∑Ô∏è Th√®me classifi√©: {theme} (pr√©diction: {prediction})")
            
            # 4. Extraction d'entit√©s (DrBERT local)
            entities = self.extract_entities(text_source)
            results['entites'] = entities
            logger.info(f"üîç Entit√©s extraites: {len(entities)} cat√©gories")
            
            # 5. G√©n√©ration du r√©sum√© (FastAPI ou local)
            summary = self.generate_summary(text_source)
            if summary:
                results['resume'] = summary
                logger.info("üìÑ R√©sum√© g√©n√©r√©")
            
            results['success'] = True
            logger.info(f"‚úÖ Traitement NLP termin√© pour l'observation {observation.id}")
            
        except Exception as e:
            error_msg = f"Erreur lors du traitement NLP: {e}"
            logger.error(f"‚ùå {error_msg}")
            results['error'] = error_msg
        
        return results
    
    def get_status(self) -> Dict[str, Any]:
        """
        Retourne le statut de la pipeline
        
        Returns:
            Dictionnaire avec le statut des diff√©rents composants
        """
        return {
            'whisper_available': self.whisper_available,
            'drbert_available': self.drbert_available,
            'fastapi_available': self.fastapi_available,
            'available_models': self.available_models,
            'models_loaded': self.models_loaded,
            'device': self.device,
            'pathology_mapping': self.pathology_mapping,
            'drbert_entity_mapping': self.drbert_entity_mapping
        }
    
    # M√©thodes de simulation pour le d√©veloppement
    def _mock_transcription(self) -> str:
        """Simulation de transcription pour le d√©veloppement"""
        transcriptions = [
            "Patient pr√©sente des douleurs thoraciques depuis ce matin. Tension art√©rielle √©lev√©e √† 160/95. Prescrit un ECG et analyses sanguines.",
            "Consultation de suivi pour diab√®te de type 2. Glyc√©mie √† jeun √† 1,45 g/L. Ajustement de la metformine √† 1000mg matin et soir.",
            "Patient anxieux, troubles du sommeil depuis 3 semaines. Prescrit anxiolytique l√©ger et suivi psychologique.",
            "Douleur abdominale chronique, suspicion de gastrite. Prescription d'IPP et fibroscopie √† programmer."
        ]
        return random.choice(transcriptions)
    
    def _mock_classification_with_prediction(self, text: str) -> tuple[str, int]:
        """Simulation de classification avec pr√©diction num√©rique"""
        text_lower = text.lower()
        
        if any(word in text_lower for word in ['c≈ìur', 'cardiaque', 'tension', 'ecg', 'thoracique', 'cardiovasculaire']):
            return 'cardiovasculaire', 0
        elif any(word in text_lower for word in ['anxi√©t√©', 'd√©pression', 'stress', 'anxieux', 'sommeil', 'psychiatrie', 'psychique']):
            return 'psy', 1
        elif any(word in text_lower for word in ['diab√®te', 'glyc√©mie', 'insuline', 'metformine', 'm√©tabolique']):
            return 'diabete', 2
        else:
            # Choisir al√©atoirement parmi les 3 classes principales
            prediction = random.choice([0, 1, 2])
            theme = self.pathology_mapping[prediction]
            return theme, prediction
    
    def _mock_classification(self, text: str) -> str:
        """Simulation de classification pour compatibilit√©"""
        theme, _ = self._mock_classification_with_prediction(text)
        return theme
    
    def _mock_entities(self, text: str) -> Dict[str, List[str]]:
        """Simulation d'extraction d'entit√©s avec cat√©gories DrBERT"""
        text_lower = text.lower()
        entities = {
            'DISO': [],  # Disorders
            'CHEM': [],  # Chemicals/Drugs
            'ANAT': [],  # Anatomy
            'PROC': [],  # Procedures
        }
        
        # Simulation bas√©e sur le contenu
        if 'douleur' in text_lower:
            entities['DISO'].append('douleur thoracique')
        if 'diab√®te' in text_lower:
            entities['DISO'].append('diab√®te de type 2')
        if 'anxi√©t√©' in text_lower or 'anxieux' in text_lower:
            entities['DISO'].append('troubles anxieux')
        if 'gastrite' in text_lower:
            entities['DISO'].append('gastrite chronique')
        if 'hypertension' in text_lower:
            entities['DISO'].append('hypertension art√©rielle')
            
        if 'metformine' in text_lower:
            entities['CHEM'].append('metformine')
        if 'anxiolytique' in text_lower:
            entities['CHEM'].append('anxiolytique')
        if 'ipp' in text_lower:
            entities['CHEM'].append('inhibiteur de pompe √† protons')
        if 'insuline' in text_lower:
            entities['CHEM'].append('insuline')
            
        if 'thorax' in text_lower or 'thoracique' in text_lower:
            entities['ANAT'].append('thorax')
        if 'c≈ìur' in text_lower:
            entities['ANAT'].append('c≈ìur')
        if 'abdomen' in text_lower:
            entities['ANAT'].append('abdomen')
        if 'pancr√©as' in text_lower:
            entities['ANAT'].append('pancr√©as')
            
        if 'ecg' in text_lower:
            entities['PROC'].append('√©lectrocardiogramme')
        if 'fibroscopie' in text_lower:
            entities['PROC'].append('fibroscopie gastrique')
        if 'analyses' in text_lower:
            entities['PROC'].append('analyses sanguines')
        if 'glyc√©mie' in text_lower:
            entities['PROC'].append('dosage glyc√©mie')
            
        # Nettoyer les listes vides
        return {k: v for k, v in entities.items() if v}
    
    def _mock_summary(self, text: str) -> str:
        """Simulation de r√©sum√© pour le d√©veloppement"""
        summaries = {
            'cardiovasculaire': "Consultation cardiologique : douleurs thoraciques avec HTA. Examens compl√©mentaires prescrits.",
            'diabete': "Suivi diab√©tologique : ajustement th√©rapeutique suite √† d√©s√©quilibre glyc√©mique.",
            'psy': "Consultation psychiatrique : troubles anxieux avec retentissement sur le sommeil. Traitement initi√©.",
            'gastro': "Consultation gastroent√©rologique : douleurs abdominales chroniques. Explorations √† poursuivre.",
            'general': "Consultation de m√©decine g√©n√©rale : prise en charge symptomatique et suivi."
        }
        
        # D√©terminer le type bas√© sur le texte
        text_lower = text.lower()
        if any(word in text_lower for word in ['c≈ìur', 'cardiaque', 'tension', 'ecg']):
            return summaries['cardiovasculaire']
        elif any(word in text_lower for word in ['diab√®te', 'glyc√©mie', 'metformine']):
            return summaries['diabete']
        elif any(word in text_lower for word in ['anxi√©t√©', 'anxieux', 'sommeil']):
            return summaries['psy']
        elif any(word in text_lower for word in ['abdomen', 'gastrite']):
            return summaries['gastro']
        else:
            return summaries['general']


# Instance globale de la pipeline
nlp_pipeline = NLPPipeline()


def process_observation_async(observation_id: int):
    """
    Fonction pour traiter une observation de mani√®re asynchrone
    √Ä utiliser avec Celery ou un syst√®me de t√¢ches similaire
    """
    from .models import Observation
    
    try:
        observation = Observation.objects.get(id=observation_id)
        results = nlp_pipeline.process_observation(observation)
        
        # Mise √† jour de l'observation avec les r√©sultats
        if results['success']:
            observation.transcription = results['transcription']
            observation.theme_classe = results['theme_classe']
            observation.model_prediction = results['model_prediction']
            observation.resume = results['resume']
            observation.entites = results['entites']
            observation.traitement_termine = True
        else:
            observation.traitement_erreur = results['error']
        
        observation.save()
        
    except Observation.DoesNotExist:
        logger.error(f"Observation {observation_id} non trouv√©e")
    except Exception as e:
        logger.error(f"Erreur lors du traitement asynchrone: {e}")